{"version":3,"sources":["webpack:///src/assets/ag-grid-sort-filter.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,sBAAsB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iDAAiD,iDAAiD,E;AAClG;AACA;AACA,mBAAmB,cAAc;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,iBAAiB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,C;;AAEA;;AAEA,C","file":"scripts.js","sourcesContent":["function sortAndFilter(allOfTheData, sortModel, filterModel) {\n    debugger\n    return sortData(sortModel, filterData(filterModel, allOfTheData));\n  }\n  function sortData(sortModel, data) {\n    var sortPresent = sortModel && sortModel.length > 0;\n    if (!sortPresent) {\n      return data;\n    }\n    var resultOfSort = data.slice();\n    resultOfSort.sort(function(a, b) {\n      for (var k = 0; k < sortModel.length; k++) {\n        var sortColModel = sortModel[k];\n        var valueA = a[sortColModel.colId];\n        var valueB = b[sortColModel.colId];\n        if (valueA == valueB) {\n          continue;\n        }\n        var sortDirection = sortColModel.sort === \"asc\" ? 1 : -1;\n        if (valueA > valueB) {\n          return sortDirection;\n        } else {\n          return sortDirection * -1;\n        }\n      }\n      return 0;\n    });\n    return resultOfSort;\n  }\n  function filterData(filterModel, data) {\n    var filterPresent = filterModel && Object.keys(filterModel).length > 0;\n    if (!filterPresent) {\n      return data;\n    }\n    // let filterCols = Object.keys(filterModel);\n    // let type = filterModel[filterCols[0]];\n\n    // let resultOfFilter =  data.filter((row)=>{ return String(row[filterCols[0]])===type.filter}); \n    // return resultOfFilter;\n    let resultOfFilter= [];\n    for(let i = 0 ;i<data.length;i++){\n        let matched = true;\n        Object.keys(filterModel).forEach((currentFilter)=>{\n            //  let colFilter =filterModel[currentFilter];\n             let value =  filterModel[currentFilter][\"filter\"];\n             if(!String(data[i][currentFilter]).toLowerCase().includes(value.toLowerCase())){\n                   matched = false;\n                   return;\n             }\n        });\n       if(matched){\n        resultOfFilter.push(data[i]) \n       }\n    }\n    return resultOfFilter;\n//     var resultOfFilter = [];\n//     for (var i = 0; i < data.length; i++) {\n//       var item = data[i];\n//       if (filterModel.age) {\n//         var age = item.age;\n//         var allowedAge = parseInt(filterModel.age.filter);\n//         if (filterModel.age.type == \"equals\") {\n//           if (age !== allowedAge) {\n//             continue;\n//           }\n//         } else if (filterModel.age.type == \"lessThan\") {\n//           if (age >= allowedAge) {\n//             continue;\n//           }\n//         } else {\n//           if (age <= allowedAge) {\n//             continue;\n//           }\n//         }\n//       }\n//       if (filterModel.year) {\n//         if (filterModel.year.values.indexOf(item.year.toString()) < 0) {\n//           continue;\n//         }\n//       }\n//       if (filterModel.country) {\n//         if (filterModel.country.values.indexOf(item.country) < 0) {\n//           continue;\n//         }\n//     }\n//     resultOfFilter.push(item);\n//   }\n//   return resultOfFilter;\n}  \n\nfunction queryBuilder(filterObject){\n\n}"],"sourceRoot":""}